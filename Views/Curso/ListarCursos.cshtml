@model List<Curso>
@using Microsoft.AspNetCore.Identity
@using System.Threading.Tasks
@inject SignInManager<Usuario> SignInManager
@inject UserManager<Usuario> UserManager

@{   
    Layout = "_Layout";
    ViewData["Title"] = "LISTA DE CURSOS";
    
}


<div class="container mt-5">

 <h1 class="text-center">@ViewData["Tittle"]</h1>

 @if(SignInManager.IsSignedIn(User)){

    Usuario myidentity = await Task.Run(() => UserManager.GetUserAsync(User));
    var roles = await Task.Run(() => UserManager.GetRolesAsync(myidentity));

    if(roles.Contains("administrador")){
        <div class="mt-3">
   
          <a class="btn btn-warning" asp-controller="Curso" asp-action="RegistrarCurso">Nueva Curso</a>

        </div>
    }

 
 }


  <br>

   <div class="row">
    @foreach (var item in Model)
    {
    <div class="col-3" style="margin-right: 20px;">

        <div class="card" style="width: 18rem;">
            <img src="data:image/png;base64,@item.fileBase64" class="card-img-top" alt="...">
            <div class="card-body">
                <h5 class="card-title">@item.nombre</h5>
                <p class="card-text">@item.informacion</p>
                <a asp-controller=Curso  asp-action="VerCurso"  class="btn btn-primary" asp-route-id="@item.Id">Detalle</a>
               @if(SignInManager.IsSignedIn(User)){

                    Usuario myidentity = await Task.Run(() => UserManager.GetUserAsync(User));
                    var roles = await Task.Run(() => UserManager.GetRolesAsync(myidentity));

                   if(roles.Contains("administrador")){
                      <a class="btn btn-info" asp-controller="Curso" asp-action="EditarCurso" asp-route-id="@item.Id">Editar</a>
                      <a class="btn btn-danger" asp-controller="Curso" asp-action="EliminarCurso" asp-route-id="@item.Id" >Eliminar</a>  
                   }

                
                }
                
            </div>
        </div>

    </div>
    }
</div>


          
         

  

 </tbody>
  
</table> 

</div>
